leetcode 332

Hierholzer 算法
https://leetcode.cn/problems/reconstruct-itinerary/solution/zhong-xin-an-pai-xing-cheng-by-leetcode-solution/


	Hierholzer = func(x string) {

		for i := 0; i < len(beg[x]); i++ {
			if beg[x][i].exists {
				beg[x][i].exists = false // meaning remove the edge
				Hierholzer(beg[x][i].to)
			}
		}
		ans = append(ans, x)   // 这个顺序，是非常重要的。
	}


解释：
对于半欧拉图， 最后在死胡同的那个点，入度 - 出度 = 1  (起始点是 出度 - 入度 = 1 的那个点）,
dfs 的关键顺序就是， 在一个点的所有边都访问过（并删除掉） 之后，才把这个点加入到 stack 中， 那么对于所有点来说， 一定是死胡同的那个点，最先被加入到 stack 中，（
为什么， 因为图是联通的， 我们考虑途中的任何一点譬如除了起点和死胡同点，从它的每一个非「死胡同」分支出发进行深度优先搜索，都将会搜回到当前节点。而从它的「死胡同」分支出发进行深度优先搜索将不会搜回到当前节点。也就是说当前节点的死胡同分支将会优先于其他非「死胡同」分支入栈。）
起始点，最后一个被加入到 stack 中 (这个是废话， 因为，我们 dfs(start) 就是从起始点开始的）。



