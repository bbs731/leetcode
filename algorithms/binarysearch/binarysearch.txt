//二分查找， 感觉，是你永远的痛啊！

https://leetcode-cn.com/leetbook/read/binary-search

模板一：

初始条件：left = 0, right = length-1
终止：left > right
向左查找：right = mid-1
向右查找：left = mid+1

func search(nums []int, target int) int {
	left, right := 0, len(nums)-1     // 初始值重要 right := len(nums) -1

	for left <= right {                 // 条件重要  <=
		h := left + (right-left)>>1 // prevent left+right overflow
		if nums[h] == target {
			return h
		} else if nums[h] > target {
			right = h - 1
		} else {
			left = h + 1
		}
	}
	// end condition left > right
	return -1
}


模板二： 这个模板，最关键的信息，是利用右邻居的信息。 就是从 mid 向右的所有元素都能保持一种 invariants f(x>=mid) = true

初始条件：left = 0, right = length
终止：left == right
向左查找：right = mid
向右查找：left = mid+1


一种实现二分查找的高级方法。
查找条件需要访问元素的直接右邻居。
使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。
保证查找空间在每一步中至少有 2 个元素。
需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。



int binarySearch([]int nums, int target){
  if(len(nums) == 0)
    return -1;

  left, right := 0, len(nums)
  for (left < right){
    // Prevent (left + right) overflow
    mid = left + (right - left) / 2
    if nums[mid] == target {
        return mid
    } else if nums[mid] < target {
        left = mid + 1
    } else {
        right = mid
    }
  }

  // Post-processing:
  // End Condition: left == right
  if left != len(nums) && nums[left] == target return left;
  return -1;
}


sort.SearchInts 属于 模板II

func Search(n int, f func(int) bool) int {
	// Define f(-1) == false and f(n) == true.
	// Invariant: f(i-1) == false, f(j) == true.
	i, j := 0, n
	for i < j {
		h := int(uint(i+j) >> 1) // avoid overflow when computing h
		// i ≤ h < j
		if !f(h) {
			i = h + 1 // preserves f(i-1) == false
		} else {
			j = h // preserves f(j) == true
		}
	}
	// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =>  answer is i.
	return i
}

模板三：

实现二分查找的另一种方法。
搜索条件需要访问元素的直接左右邻居。
使用元素的邻居来确定它是向右还是向左。
保证查找空间在每个步骤中至少有 3 个元素。
需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。



初始条件：left = 0, right = length-1
终止：left + 1 == right
向左查找：right = mid
向右查找：left = mid


func binarSearch(nums []int, target int) int {
	if len(nums) == 0 {
		return -1
	}
	left, right := 0, len(nums)-1

	for left+1 < right {

		mid := left + (right-left)>>1
		if nums[mid] == target {
			return mid
		} else if nums[mid] < target {
			left = mid
		} else {
			right = mid
		}
	}

	// Post-processing:
	// End Condition: left + 1 == right
	if nums[left] == target {
		return left
	}
	if nums[right] == target {
		return right
	}
	return -1
}

